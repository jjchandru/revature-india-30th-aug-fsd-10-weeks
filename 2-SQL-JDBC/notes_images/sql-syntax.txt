show schemas;

use [db-name];

show tables;

set autocommit = 0;

create schema [schema-name];

drop schema [schema-name];

create table [table-name] ([col1 type], [col2 type], [col3 type], ....);

insert into [table-name] values (val1, val2, ....); (not a recommended practice)

insert into [table-name] ([col1, col2, ...]) values (val1, val2, ....);

update [table-name] set [col1] = [new-value], [col2] = [new-value], ... where [condition];

delete from [table-name] where [condition];

truncate table [table-name];

alter table [table-name] add [column-name] [type];

alter table [table-name] rename to [new-table-name];

alter table [table-name] drop column [column-name];

create table [table-name] (
    id int,
    [col1 type],
    [col2 type],
    primary key (id) auto_increment
);

create table [table-name] (
    id int primary key auto_increment,
    [col1 type],
    [col2 type]
);

alter table [table-name] add [column-name] [type] primary key auto_increment;

drop table [table-name];

select * from [table-name];

select [col1], [col2], [col3], ... from [table-name];

select * from [table-name] where [column] = [value];
# comparison operators - =, >, >=, <, <=, <>, !=, between ... and ..., in(), is, is not, is not null, is null, like

select * from [table-name] where [column] like [value];
# % - represents zero or more characters; _ (underscore) - represents single character

select * from [table-name] where [col1] > [value] and [col2] < [value];

select * from [table-name] order by [column-name];

select * from [table-name] order by [column-name] desc;

select * from [table-name] order by [col1], [col2], ...;

select [aggregate-function]([col1]) from [table-name];

select * from [table-name] where [col-1] = (select [aggregate-function]([col1]) from [table-name]);

select distinct [column-name] from [table-name];

select   [aggregate-column], [aggregate-function-on-another-column] 
from     [table-name] 
group by [aggregate-column];

select   [aggregate-column], [aggregate-function-on-another-column] 
from     [table-name] 
group by [aggregate-column]
having   [condition-based-on-aggregate-function];

select 
case
    when [column-name] = value then [new-value]
    when [column-name] = value then [new-value]
end [alias-name]
from [table-name];

// Implicit Join Notation
select * from [table1], [table2], [table3] .... where [join-conditions];

// Explicit Join Notation
select * from [table1] 
    inner join [table2] on [join-condition]
    inner join [table3] on [join-condition]
    inner join [table4] on [join-condition]
    ...
;

alter table [table-name] add constraint [constraint-name] foreign key ([ref-column-name]) references [link-table-name](link-table-column-name);

create table [table-name] (
    id int primary key auto_increment,
    [col1 type],
    [col2 type],
    primary key (id),
    constraint [constraint-name] foreign key ([this-table-column-name]) references [ref-table-name]([ref-table-column])
);

create view [view-name] as [select-query];

Example Data Union
==================
create table fruit1(id int, name varchar(20));
insert into fruit1 (id, name) values (1, 'Apple');
insert into fruit1 (id, name) values (2, 'Orange');
insert into fruit1 (id, name) values (3, 'Grapes');

create table fruit2(fruit2_id int, fruit2_name varchar(20));
insert into fruit2 (fruit2_id, fruit2_name) values (3, 'Grapes');
insert into fruit2 (fruit2_id, fruit2_name) values (4, 'Mango');

Index
=====
create unique index [index-name] on [table-name]([col-1], [col-2], ...);
create index [index-name] on [table-name]([col-1], [col-2], ...);
show index from [table-name];

Stored Procedure
================
create procedure [procedure-name]([IN|OUT|INOUT] [parameter-name] [data-type], ...)
begin
   [statements]
end

drop procedure [procedure-name]

Stored Function
===============
create function [function-name]([parameter-name] [data-type], ...) returns [data-type]
[deterministic|non deterministic]
[contains sql | no sql | reads sql data | modifies sql data]
begin
    [statements];
end

drop function if exists [function=name]